<style>
.form-inline > .form-group {
    vertical-align: top;
}
</style>

<div class="container text-center mt-3">
  <div vg-if="!c.NoteTaking && !c.ModalShowing">
    <h1>QwikNotes</h1>

    <p class="lead">
      Have you ever been switching computers or users but wanted to keep some text quickly and easily? Well now you can!
      QwikNotes is a note-taking app that uses your IP Address to identify you, so that as long as you are on the same WiFi network you keep your notes!
      You can optionally password-protect your notes in case you don't want people on your wifi network seeing your notes.
    </p>

    <p class="lead flex-fill">
      <div class="input-group">
        <button class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#newNote" @click="c.ModalShowing = true">
          <i class="fa fa-plus"></i>
        </button>
        <vgform:Input type="search" class="form-control" :Value="vgform.StringPtr{&c.SearchQuery}" placeholder="Search..."></vgform:Input>
        <button class="btn btn-outline-secondary" @click="go c.Search(event.EventEnv())">
            <i class="fa fa-search"></i>
        </button>
      </div>
    </p>

    <ul class="list-group">
      <a class="list-group-item list-group-item-action" vg-for="_, item := range c.Results" vg-content="item" @click="go c.OpenNote(item, event.EventEnv())"></a>
    </ul>
  </div>

  <div vg-if="c.NoteTaking">
    <h1 vg-content="c.Name"></h1>

    <vgform:Textarea id="textarea1" class="form-control" :Value='vgform.StringPtr{&c.NoteData}'></vgform:Textarea>
    <br>
    <div class="btn-group">
      <button class="btn btn-success" @click="go c.Save(event.EventEnv())"><i class="fa fa-save"></i>&nbsp;Save</button>
      <button class="btn btn-danger" @click="go c.Delete(event.EventEnv())">Delete&nbsp;<i class="fa fa-trash"></i></button>
    </div>

    <button class="btn btn-primary" style="left: 2vw; bottom: 2vh; position: fixed;" @click='c.NoteTaking = false; c.SearchQuery = ""; go c.Search(event.EventEnv())'><i class="fa fa-arrow-left"></i>&nbsp;back</button>
  </div>

  <div vg-if="c.ModalShowing">
    <div class="form-group">
      <label>Note Name</label>
      <vgform:Input type="text" class="form-control" :Value="vgform.StringPtr{&c.Name}" placeholder="Name"></vgform:Input>
      <label>Password (optional)</label>
      <vgform:Input type="text" class="form-control" :Value="vgform.StringPtr{&c.Password}" placeholder="Password"></vgform:Input>
    </div>
    <div class="btn-group mt-3">
    <button class="btn btn-danger" @click='c.ModalShowing = false'><i class="fa fa-arrow-left"></i>&nbsp;Back</button>
      <button class="btn btn-success" @click="go c.NewNote(event.EventEnv())"><i class="fa fa-save"></i>&nbsp;Create</button>
    </div>
  </div>

  <div class="overlay" vg-if="c.Loading"><div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div></div>
</div>

<script type="application/x-go">
import "errors"
import "time"
import "bytes"

type Notes struct {
  SearchQuery string `vugu: "data"`
  Results []string `vugu: "data"`
  Loading bool `vugu: "data"`
  NoteTaking bool `vugu: "data"`
  Name string `vugu: "data"`
  Password string `vugu: "data"`
  ModalShowing bool `vugu: "data"`
  NoteData string `vugu: "data"`
}

func (c *Notes) Search(ee vugu.EventEnv) {
  if ee != nil {
    ee.Lock()
    c.Loading = true
    ee.UnlockRender()
  }
  
  output := get("https://api.nv7haven.com/note_search/" + url.PathEscape(c.SearchQuery + "%"))
  err := json.Unmarshal([]byte(output), &c.Results)
  if err != nil {
    panic(err)
  }

  if ee != nil {
    ee.Lock()
    c.Loading = false
    ee.UnlockRender()
  }
}

func (c *Notes) NewNote(ee vugu.EventEnv) {
  ee.Lock()
  c.Loading = true
  ee.UnlockRender()
  
  output := get("https://api.nv7haven.com/new_note/" + url.PathEscape(c.Name) + "/" + url.PathEscape(c.Password))
  if string(output) != "" {
    panic(errors.New(string(output)))
  }

  c.Open(ee)

  ee.Lock()
  c.Loading = false
  c.ModalShowing = false
  ee.UnlockRender()
}

func (c *Notes) Open(ee vugu.EventEnv) bool {
  ee.Lock()
  c.Loading = true
  ee.UnlockRender()
  
  output, status := getCode("https://api.nv7haven.com/get_note/" + url.PathEscape(c.Name) + "/" + url.PathEscape(c.Password))
  if status == 500 {
    return false
  }

  ee.Lock()
  c.Loading = false
  c.NoteTaking = true
  c.NoteData = output
  ee.UnlockRender()
  return true
}

func (c *Notes) OpenNote(name string, ee vugu.EventEnv) {
  ee.Lock()
  c.Loading = true
  ee.UnlockRender()

  c.Name = name
  output := get("https://api.nv7haven.com/has_password/" + url.PathEscape(c.Name))
  if string(output) == "1" {
    c.Password = js.Global().Call("prompt", "What is the password?").String()
    working := c.Open(ee)
    for !working {
      c.Password = js.Global().Call("prompt", "What is the password?").String()
      working = c.Open(ee)
    }
  } else if string(output) == "0" {
    c.Open(ee)
  }
  ee.Lock()
  c.Loading = false
  ee.UnlockRender()
}

func (c *Notes) Save(ee vugu.EventEnv) {
  ee.Lock()
  c.Loading = true
  ee.UnlockRender()

  output := post("https://api.nv7haven.com/change_note/" + url.PathEscape(c.Name) + "/" + url.PathEscape(c.Password), "text/plain", bytes.NewBuffer([]byte(c.NoteData)))
  if string(output) != "" {
    panic(errors.New(string(output)))
  }

  ee.Lock()
  c.Loading = false
  ee.UnlockRender()
}

func (c *Notes) Delete(ee vugu.EventEnv) {
  ee.Lock()
  c.Loading = true
  ee.UnlockRender()

  output := get("https://api.nv7haven.com/delete_note/" + url.PathEscape(c.Name) + "/" + url.PathEscape(c.Password))
  if string(output) != "" {
    panic(errors.New(string(output)))
  }

  ee.Lock()
  c.Loading = false
  c.NoteTaking = false
  c.SearchQuery = ""
  go c.Search(ee)
  ee.UnlockRender()
}

func (c *Notes) Init(ctx vugu.InitCtx) {
  c.Search(ctx.EventEnv())
}
</script>