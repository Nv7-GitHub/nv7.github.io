<div class="container text-center mt-3">
  <h1>WordSearch</h1>
  <p class="lead" vg-if="!c.OverrideMessage">
    This is a word search solver made by Nv7! If you want, you can find the source code in
    <a href="https://github.com/Nv7-GitHub/nv7haven.com/blob/master/wordSearch.go" target="_blank">on GitHub</a>
    and some example word searches
    <a href="#" @click="c.LoadExample()">here</a>!
  </p>
  <p class="lead" vg-if="c.OverrideMessage">
    This is a sample board! The words on this board are
    <ul vg-if="c.OverrideMessage" style="text-align: left;">
      <li>cow</li>
      <li>tomato</li>
      <li>tractor</li>
      <li>horse</li>
      <li>sheep</li>
      <li>basket</li>
      <li>cat</li>
    </ul>
  </p>

  <vgform:Textarea :Value='vgform.StringPtrDefault(&c.BoardText, "")' class="form-control" vg-if="!c.BoardCalculated"></vgform:Textarea>
  <button class="btn btn-primary" @click="c.ParseBoard()" vg-if="!c.BoardCalculated">Read Board</button>

  <vgform:Input :Value='vgform.StringPtrDefault(&c.Word, "")' class="form-control" vg-if="c.BoardCalculated"></vgform:Input>
  <button class="btn btn-primary" @click="c.FindWord()" vg-if="c.BoardCalculated">Find Word</button>

  <div vg-if='c.CouldntFind' class="alert alert-danger alert-dismissible fade show" role="alert">
      <h4 class="alert-heading">
        Couldn't Find That...
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @click="c.CouldntFind = false"></button>
      </h4>
      <p>Sorry! We couldn't find that word. Maybe you made a typo?</p>
  </div>

  <div class="table-responsive">
    <table class="table" vg-if="c.BoardCalculated">
      <tr vg-for="x, row := range c.Board">
        <td vg-for="y, char := range row" vg-content="string(char)" :class="c.GetColor(x, y)"></td>
      </tr>
    </table>
  </div>

  <button vg-if="c.BoardCalculated" @click="c.Reset()" class="btn btn-danger">Reset</button>
</div>

<script type="application/x-go">
import "github.com/vugu/vugu/vgform"

type WordSearch struct {
  BoardText string `vugu:"data"`
  BoardCalculated bool `vugu:"data"`
  Board [][]rune
  BoardColors [][]bool `vugu:"data"`
  Word string
  CouldntFind bool `vugu:"data"`
  WordPoses [][]int
  OverrideMessage bool `vugu:"data"`
}

func (c *WordSearch) ParseBoard() {
  c.Board = parseText(c.BoardText)
  c.BoardCalculated = true
  c.BoardColors = make([][]bool, len(c.Board))
  for i := range c.BoardColors {
    c.BoardColors[i] = make([]bool, len(c.Board[i]))
  }
}

func (c *WordSearch) Reset() {
  c.BoardCalculated = false
  c.OverrideMessage = false
}

func (c *WordSearch) LoadExample() {
  c.OverrideMessage = true
  c.BoardText = exampleBoard
  c.ParseBoard()
}

func (c *WordSearch) GetColor(x, y int) string{
  if c.BoardColors[x][y] {
    return "table-success"
  }
  return ""
}

func (c *WordSearch) FindWord() {
  if c.WordPoses != nil {
    for _, wordpos := range c.WordPoses {
      c.BoardColors[wordpos[0]][wordpos[1]] = false
    }
  }

  c.WordPoses = findWord(c.Board, c.Word)
  if c.WordPoses != nil {
    for _, wordpos := range c.WordPoses {
      c.BoardColors[wordpos[0]][wordpos[1]] = true
    }
  } else {
    c.CouldntFind = true
  }
}
</script>
